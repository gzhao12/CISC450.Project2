Script started on Tue 08 May 2018 10:42:16 PM EDT
konark@cisc450:~/CISC-450/proj2/client$ ls -l
total 9
-rw-rw-r-- 1 konark konark     0 May  8 22:42 client_no_loss.txt
-rw-rw-r-- 1 konark konark   213 May  8 22:24 Makefile
-rw-rw-r-- 1 konark konark 10199 May  8 22:33 udpclient.c
konark@cisc450:~/CISC-450/proj2/client$ make all
/usr/bin/gcc udpclient.c -o udpclient
/usr/bin/gcc -DDEBUG udpclient.c -o udpclienttest
konark@cisc450:~/CISC-450/proj2/client$ ls -l
total 10
-rw-rw-r-- 1 konark konark     0 May  8 22:42 client_no_loss.txt
-rw-rw-r-- 1 konark konark   213 May  8 22:24 Makefile
-rwxrwxr-x 1 konark konark 14149 May  8 22:42 udpclient
-rw-rw-r-- 1 konark konark 10199 May  8 22:33 udpclient.c
-rwxrwxr-x 1 konark konark 14149 May  8 22:42 udpclienttest
konark@cisc450:~/CISC-450/proj2/client$ ./udpclient 0 0
Enter hostname of server: localhost
Enter port number for server: 46792
Please input a file name:
test2.txt
Packet 1 received with 58 data bytes 
ACK 1 transmitted 
Packet 0 received with 64 data bytes 
ACK 0 transmitted 
Packet 1 received with 57 data bytes 
ACK 1 transmitted 
Packet 0 received with 28 data bytes 
ACK 0 transmitted 
Packet 1 received with 57 data bytes 
ACK 1 transmitted 
Packet 0 received with 63 data bytes 
ACK 0 transmitted 
Packet 1 received with 50 data bytes 
ACK 1 transmitted 
Packet 0 received with 58 data bytes 
ACK 0 transmitted 
Packet 1 received with 55 data bytes 
ACK 1 transmitted 
Packet 0 received with 19 data bytes 
ACK 0 transmitted 
Packet 1 received with 1 data bytes 
ACK 1 transmitted 
Packet 0 received with 80 data bytes 
ACK 0 transmitted 
Packet 1 received with 1 data bytes 
ACK 1 transmitted 
Packet 0 received with 50 data bytes 
ACK 0 transmitted 
Packet 1 received with 47 data bytes 
ACK 1 transmitted 
Packet 0 received with 35 data bytes 
ACK 0 transmitted 
Packet 1 received with 75 data bytes 
ACK 1 transmitted 
Packet 0 received with 80 data bytes 
ACK 0 transmitted 
Packet 1 received with 80 data bytes 
ACK 1 transmitted 
Packet 0 received with 80 data bytes 
ACK 0 transmitted 
Packet 1 received with 32 data bytes 
ACK 1 transmitted 
Packet 0 received with 53 data bytes 
ACK 0 transmitted 
Packet 1 received with 2 data bytes 
ACK 1 transmitted 
Packet 0 received with 2 data bytes 
ACK 0 transmitted 
Packet 1 received with 2 data bytes 
ACK 1 transmitted 
Packet 0 received with 4 data bytes 
ACK 0 transmitted 
Packet 1 received with 1 data bytes 
ACK 1 transmitted 
Packet 0 received with 2 data bytes 
ACK 0 transmitted 
Packet 1 received with 2 data bytes 
ACK 1 transmitted 
Packet 0 received with 36 data bytes 
ACK 0 transmitted 
Packet 1 received with 1 data bytes 
ACK 1 transmitted 
Packet 0 received with 58 data bytes 
ACK 0 transmitted 
Packet 1 received with 1 data bytes 
ACK 1 transmitted 
Packet 0 received with 17 data bytes 
ACK 0 transmitted 
Packet 1 received with 61 data bytes 
ACK 1 transmitted 
Packet 0 received with 61 data bytes 
ACK 0 transmitted 
Packet 1 received with 61 data bytes 
ACK 1 transmitted 
Packet 0 received with 61 data bytes 
ACK 0 transmitted 
Packet 1 received with 61 data bytes 
ACK 1 transmitted 
Packet 0 received with 61 data bytes 
ACK 0 transmitted 
Packet 1 received with 61 data bytes 
ACK 1 transmitted 
Packet 0 received with 61 data bytes 
ACK 0 transmitted 
Packet 1 received with 15 data bytes 
ACK 1 transmitted 
Packet 0 received with 1 data bytes 
ACK 0 transmitted 
Packet 1 received with 76 data bytes 
ACK 1 transmitted 
Packet 0 received with 80 data bytes 
ACK 0 transmitted 
Packet 1 received with 71 data bytes 
ACK 1 transmitted 
Packet 0 received with 80 data bytes 
ACK 0 transmitted 
Packet 1 received with 61 data bytes 
ACK 1 transmitted 
Packet 0 received with 1 data bytes 
ACK 0 transmitted 
Packet 1 received with 1 data bytes 
ACK 1 transmitted 
Packet 0 received with 80 data bytes 
ACK 0 transmitted 
Packet 1 received with 80 data bytes 
ACK 1 transmitted 
Packet 0 received with 80 data bytes 
ACK 0 transmitted 
Packet 1 received with 80 data bytes 
ACK 1 transmitted 
Packet 0 received with 39 data bytes 
ACK 0 transmitted 
Packet 1 received with 26 data bytes 
ACK 1 transmitted 
End of Transmission Packet with sequence number 0 received with 0 data bytes

Number of data packets received successfully: 57
Total number of data bytes received which are delivered to user: 2510
Total number of duplicate data packets received: 0
Number of data packets received but dropped due to loss: 0
Total number of data packets received: 57
Number of ACKs transmitted without loss: 57
Number of ACKs generated but dropped due to loss: 0
Total number of ACKs generated: 57
konark@cisc450:~/CISC-450/proj2/client$ ls -l
total 26
-rw-rw-r-- 1 konark konark     0 May  8 22:42 client_no_loss.txt
-rw-rw-r-- 1 konark konark   213 May  8 22:24 Makefile
-rw-rw-r-- 1 konark konark  2510 May  8 22:44 test2.txt
-rwxrwxr-x 1 konark konark 14149 May  8 22:42 udpclient
-rw-rw-r-- 1 konark konark 10199 May  8 22:33 udpclient.c
-rwxrwxr-x 1 konark konark 14149 May  8 22:42 udpclienttest
konark@cisc450:~/CISC-450/proj2/client$ cat test2.txt 
In this project, you will implement a client and a server
which use TCP to transmit a file from the server to the client.
Both the client and the server will run on the course VM
{\em cisc450.cis.udel.edu},
but they should be written in such a way that they could
conceivably be run on any two hosts, not necessarily the same.
For convenience, both the hostname and the server
port number may be hardcoded into both client and server,
but this should be done in such a way that they should
be easy to change.

The server starts by waiting for a connection request from the client. %printin

The client starts by prompting the user to enter 
%the hostname and port number for the server. 
%It then prompts the user to enter
the name of the file to be transferred. The client then sends a connection
request to the server.  After the connection is established, the client sends a
filename to the server. The server reads the file and sends it to the client in
a series of packets as described below. The client receives the file and stores
it with the name {\em out.txt}.
When the file transfer is complete, both the client 
A
B
C
DEF

G
H
and the server terminate execution.

The format of a data packet is shown in the figure below:

\begin{verbatim}
    <----------------- 16 bits (2 bytes) ------------------>
    --------------------------------------------------------
    |                Packet Sequence Number                |
    --------------------------------------------------------
    |              Count (no. of data bytes)               |
    --------------------------------------------------------
    |            Data Bytes      |          ...            |
    --------------------------------------------------------
\end{verbatim}

Each data packet contains a 4-byte long header followed by a number of data
characters.  The header contains  2 fields, each of length 16 bits (2 bytes) as
shown in the figure above. You must convert the values in these fields
into the network byte order when they are transmitted, and convert them back to
convert them back to host byte order when they are received.


The first field of the header is called the packet sequence number. Each packet
transmitted  by the  server is  assigned a sequence number  starting with 1 and
incremented by 1 for each packet.  The second field of the header is a count of
data characters in the packet. This value must be in the range 0 through 80. If
the count is 0, then there are no data
characters in the packet.
konark@cisc450:~/CISC-450/proj2/client$ cd ..
konark@cisc450:~/CISC-450/proj2$ diff client/test2.txt server/test2.txt
konark@cisc450:~/CISC-450/proj2$ exit
exit

Script done on Tue 08 May 2018 10:46:14 PM EDT
